Data Manipulation
========================================================
author: Mike McCann 
date: 22-23 January 2015 
autosize: true
transition: none


Download files for this section
===========================================

[climate01.csv](https://www.dropbox.com/s/cwazei3gv11w1y6/climate01.csv?dl=1)  

[climate02.csv](https://www.dropbox.com/s/dfcmpry4z5kavf7/climate02.csv?dl=1)


Beyond Vectors: Data frames
===========================================
A **data frame** is a very important data type in R.  

It's pretty much the *de facto* data structure for most tabular data and what we use for statistics. 



Example data frame 
===========================================
Data frames are usually read in from a file, but R comes with many practice datasets. 

We will use the **`iris`** dataset, famously used by Fisher in 1936 (http://en.wikipedia.org/wiki/Iris_flower_data_set)

```{r, results = 'asis', comment = NA,message=FALSE,echo=FALSE}
require(xtable)
options(xtable.type = 'html')
xtable(head(iris))
```


Useful functions for data frames 
===========================================
- **`head()`** - see first 5 rows
- **`tail()`** - see last 5 rows
- **`dim()`** - dimensions (# rows, # columns)
- **`nrow()`** - number of rows
- **`ncol()`** - number of columns
- **`str()`** - structure of any object
- **`class()`** - class of any object
- **`rownames()`** - row names 
- **`colnames()`** - column names


Try It!
==================  
2. How many rows does the **iris** data have?

3. How many columns? What are the column names?

4. Using the **`str()`** function, how many species are in the data?

5. What classes are each of the columns?



Dataframe syntax and subsetting
====================================  
R has many powerful subset operators and mastering them will allow you to easily perform complex operation on any kind of dataset. Dataframes are akin to a series of vectors combined into a tabular structure. 

```{r, eval=FALSE}
head(iris)
```
```{r, results = 'asis', comment = NA,message=FALSE,echo=FALSE}
require(xtable)
options(xtable.type = 'html')
xtable(head(iris))
```

Indexing
==================
Index individual elements of a data frame with **nameofdf[row#, column#]**
```{r}
iris[1,1] # first row, first column
iris[3,3] # third row, third column
```


Indexing
==================
Get entire rows or columns
```{r, eval=FALSE}
iris[2,] # the second row 
iris[,3] # the third column
```

Indexing
==================
Columns can also be called by their name
```{r, eval=FALSE}
iris[,"Sepal.Length"]
```

Indexing
==================
Use the dollar sign **`$`** to call a column
```{r, eval=FALSE}
iris$Sepal.Length
```



Indexing
==================
Three ways to get the first column **`Sepal.Length`**.
```{r, eval=FALSE}
iris[,1]

iris[,"Sepal.Length"]

iris$Sepal.Length

```


Dataframes can be indexed for both rows and columns
=================================================
Get the 5th, 7th, and 9th rows and the first two columns.

```{r}
iris[c(5,7,9), 1:2]
```


Try It!
==================
5. What is the 9th entry of the **Sepal.Width** column? Call it **x**.

6. How would you get all entries of **iris** for the 17th row?

7. Return an object with the 1st, 4th and 7th rows of the **iris** dataframe?

8. Use the **`seq()`** function to get all odd rows in the **iris** dataset?

9. What happens when you use negative numbers? **Hint:** Use **`dim()`** on the original and final objects. 


Using logical statements
====================================
An extremely helpful tool is to subset your data using logic rather than an index.  

Let's begin with continious numeric data.
```{r,fig.height=4,fig.width=6}
x <- iris$Petal.Width # Grab the Sepal.Width

hist(x) # Make a histogram
```


Subset Using Statements
====================================
```{r}
x <- iris$Petal.Width

logi <- x > 1 # Which values are greater than 1?

a <- iris[logi,] # Records where Petal.Width >1
```

```{r, results = 'asis', comment = NA,echo=FALSE}
options(xtable.type = 'html')
xtable(head(a))
```


Subset Using Statements
====================================
```{r}
x <- iris$Petal.Width

logi <- x > 1 # Which values are greater than 1?

a <- iris[logi,] # Records where Petal.Width >1
```

This is the same as:
```{r, eval=FALSE}
iris[iris$Petal.Width > 1, ]
```


More Subsets
====================================
Return a different column based on the subset

```{r, eval=FALSE}
x <- iris$Petal.Width

logi <- x > 1 # Which values are greater than 1?

# Return all values in Petal.Length where Sepal.Width is greater than 1. 

iris[logi,"Petal.Length"]
```



Try It!
==================
10. Why is **`iris[iris>3,]`** a nonsensical command? 

11. What about **`iris[iris$Sepal.Length>3]`**? 

12. Create a histogram of petal lengths for the entire data.

13. Subset the data for petal lengths greater than two.

14. Create a histogram of your new data.


Build a data frame from scratch 
=====================================
Use the **`data.frame`** function. 
```{r}
df <- data.frame(x=1:5, y=6:2)
df
```


Add columns to data frames 
=====================================
Use the assignment operator **`<-`**
```{r}
df$z <- 41:45
df
```


Remove columns from data frames 
=====================================
**rm()** does not work to remove a single column of a data frame.

```{r}
df$z <- NULL
df
```

Assign **`NULL`** to the column. This is not reversible.

Other types of logical statements 
======================================================
Many different types of logical statements can be used to subset data.

For all types of data, if we want a specific value/character/factor we use **`==`**

```{r}
Only4 <- iris[iris$Petal.Length == 4,]
```

```{r, results = 'asis', comment = NA,echo=FALSE}
options(xtable.type = 'html')
# Get records with petal length of 4
xtable(head(Only4))
```


Get only records from the species versicolor
==============================================
```{r}
versicolor_only <- iris[iris$Species == "versicolor",]
```

```{r,results = 'asis', comment = NA,echo=FALSE}
options(xtable.type = 'html')
xtable(head(versicolor_only))
```



Combine logical statments 
=============================
Use **&** (AND) if you want both statements to be true.  
Use **|** (OR) if you want either statement to be true.

```{r}
subsetX <- iris[iris$Petal.Length > 4 & iris$Species == "versicolor",]
```

```{r,table, results = 'asis', comment = NA,echo=FALSE}
options(xtable.type = 'html')
xtable(head(subsetX))
```



Try It!
==================
Explain in words each of the following logical statements

15. **`iris[1:4,]`**

16. **`iris[c(1:15),c(1,3)]`**

17. **`iris[iris$Species == "setosa", "Petal.Width"]`**

18. What happens when you add a **`!`** before a logical statment? 

**Hint:** Compare  
**`iris[iris$Species == "setosa",]`  
`iris[!iris$Species == "setosa",]`**  


Matrices 
============================
Similar to data frames. 

Two-dimensional and only consists of numbers.

Some functions require a **matrix** as an input. 

```{r}
a <- matrix(1:9, ncol=3, nrow=3)
```


Matrices 
============================
Similar indexing as a data frame

```{r}
a <- matrix(1:9, ncol=3, nrow=3)
a
a[2,2]
a[2,]
```


Importing your own data
==============================
R is not a spreadsheet program, so it is not great for direct data entry. 

Therefore, for many analyses, you will want to import data. 

**.csv** files are often the preferred format. 

Before we do that, we will need to look at concept of your **working directory**.


Working directory
=============================
Find out what your current working directory is
```{r}
getwd()
```

This is the folder on your computer where R will look to open or write files. 


Working directory
=============================
Set your working directory 
```{r, eval=FALSE}
getwd()

setwd("C:/Users/Mike/Desktop/Dropbox/R_course/data")

# relative paths also work 
setwd("./data") 
```


Working directory
============================
See everything currently in your working directory 
```{r, eval=FALSE}
list.files()
```


Importing your own data
==============================
Manually move the climate data that you downloaded to your working directory.
```{r, eval=FALSE}
data01 <- read.csv("climate01.csv")
head(data01)
```

**`read.table()`** is an alternative function for importing data. 


R Tip: Variable names 
====================================
> One of the largest sources of frustration with R can be importing data. Variable names often cause problems. 
> 
> - **Do not have spaces in variable names**  
> - **Use lower case letters**   
> - **Abbreviate when possible**  
> 
```{r, eval=FALSE}
Average Height # BAD
Average.Height # OK   
average.height # BETTER  
avg.height     # GOOD!  
```


Try It!
=============================
1. Import [climate01.csv](https://www.dropbox.com/s/cwazei3gv11w1y6/climate01.csv?dl=1) & [climate02.csv](https://www.dropbox.com/s/dfcmpry4z5kavf7/climate02.csv?dl=1). Save them as separate data frames.
2. Compare these two datasets and identify any errors in **climate02.csv**


Exporting data frames 
==============================
```{r, eval=FALSE}
# write the file 
write.csv(iris,"iris.csv", row.names=FALSE)

# check and see
list.files()
```


Questions?
==================

[Worksheet](https://rpubs.com/mccannecology/53354)

[Answers](https://rpubs.com/mccannecology/53360)
